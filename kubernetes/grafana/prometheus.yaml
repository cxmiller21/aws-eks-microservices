apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    name: monitoring
spec:
  # The project the application belongs to.
  project: default

  source:
    chart: https://prometheus-community.github.io/helm-charts
    helm:
      passCredentials: false
      releaseName: prometheus

      # The path is relative to the spec.source.path directory defined above
      valueFiles:
      - ../../grafana/values/grafana-prometheus-values.yaml

      # Ignore locally missing valueFiles when installing Helm chart. Defaults to false
      ignoreMissingValueFiles: false

      # Values file as block file. This takes precedence over values
      # valuesObject:
      #   ingress:
      #     enabled: true

      # Skip custom resource definition installation if chart contains custom resource definitions. Defaults to false
      skipCrds: false

      version: v3

  # Destination cluster and namespace to deploy the application
  destination:
    # cluster API URL
    # server: https://kubernetes.default.svc
    # or cluster name
    name: aws-eks-demo
    namespace: monitoring

  # Extra information to show in the Argo CD Application details tab
  # info:
  #   - name: 'Example:'
  #     value: 'https://example.com'

  # Sync policy
  syncPolicy:
    automated: # automated sync by default retries failed attempts 5 times with following delays between attempts ( 5s, 10s, 20s, 40s, 80s ); retry controlled using `retry` field.
      prune: true # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: true # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=false # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    - PrunePropagationPolicy=foreground # Supported policies are background, foreground and orphan.
    - PruneLast=true # Allow the ability for resource pruning to happen as a final, implicit wave of a sync operation
    - RespectIgnoreDifferences=true # When syncing changes, respect fields ignored by the ignoreDifferences configuration
    managedNamespaceMetadata: # Sets the metadata for the application namespace. Only valid if CreateNamespace=true (see above), otherwise it's a no-op.
      labels: # The labels to set on the application namespace
        argocd: true
      # annotations: # The annotations to set on the application namespace
      #   the: same

    # The retry feature is available since v1.7
    retry:
      limit: 5 # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: 5s # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: 2 # a factor to multiply the base duration after each failed retry
        maxDuration: 3m # the maximum amount of time allowed for the backoff strategy

  # Will ignore differences between live and desired states during the diff. Note that these configurations are not
  # used during the sync process unless the `RespectIgnoreDifferences=true` sync option is enabled.
  # ignoreDifferences:
  # # for the specified json pointers
  # - group: apps
  #   kind: Deployment
  #   jsonPointers:
  #   - /spec/replicas
  # - kind: ConfigMap
  #   jqPathExpressions:
  #   - '.data["config.yaml"].auth'
  # # for the specified managedFields managers
  # - group: "*"
  #   kind: "*"
  #   managedFieldsManagers:
  #   - kube-controller-manager
  #   # Name and namespace are optional. If specified, they must match exactly, these are not glob patterns.
  #   name: my-deployment
  #   namespace: my-namespace

  # RevisionHistoryLimit limits the number of items kept in the application's revision history, which is used for
  # informational purposes as well as for rollbacks to previous versions. This should only be changed in exceptional
  # circumstances. Setting to zero will store no history. This will reduce storage used. Increasing will increase the
  # space used to store the history, so we do not recommend increasing it.
  revisionHistoryLimit: 10